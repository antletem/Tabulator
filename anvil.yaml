dependencies: []
services: []
startup: {type: form, module: Tabulator.__StartupForm}
package_name: Tabulator
allow_embedding: false
name: Tabulator
runtime_options: {version: 2, client_version: '3', server_version: python3-full}
metadata: {}
native_deps: {head_html: "<link href=\"https://unpkg.com/tabulator-tables@4.6.3/dist/css/bootstrap/tabulator_bootstrap.min.css\"\
    \ rel=\"stylesheet\">\n<script type=\"text/javascript\" src=\"https://unpkg.com/tabulator-tables@4.6.3/dist/js/tabulator.min.js\"\
    ></script>\n\n<script>\n// ignore harmless errors that will cause Anvil popups\n\
    // see example issue https://github.com/souporserious/react-measure/issues/104\n\
    window.addEventListener('error', function(e) {\n  // This covers both \n  // \
    \  'ResizeObserver loop limit exceeded', and\n  //   'ResizeObserver loop ocmpleted\
    \ with undelivered notifications'\n  if (e.message.indexOf(\"ResizeObserver loop\"\
    ) !== -1) {\n    e.stopPropagation();\n    e.stopImmediatePropagation();\n  }\n\
    });\n\n// enhancements\n//rowSelectionDisplay column formatter\nTabulator.prototype.moduleBindings.format.prototype.formatters.rowSelectionDisplay=function(e){var\
    \ t=this,o=document.createElement(\"input\");if(o.type=\"checkbox\",this.table.modExists(\"\
    selectRow\",!0))if(o.addEventListener(\"click\",function(e){e.stopPropagation()}),\"\
    function\"==typeof e.getRow){var l=e.getRow();o.addEventListener(\"change\",function(e){l.toggleSelect()}),o.checked=l.isSelected(),this.table.modules.selectRow.registerRowSelectCheckbox(l,o)}else\
    \ o.addEventListener(\"change\",function(e){t.table.modules.selectRow.selectedRows.length?t.table.deselectRow():t.table.selectRow(t.table.rowManager.getDisplayRows())}),this.table.modules.selectRow.registerHeaderSelectCheckbox(o);return\
    \ o};\n// link formatter remove href\nTabulator.prototype.moduleBindings.format.prototype.formatters.link=function(t,e,a){var\
    \ l=t.getValue(),r=(e.urlPrefix,e.download),i=l,n=document.createElement(\"a\"\
    );if(e.labelField&&(i=t.getData()[e.labelField]),e.label)switch(typeof e.label){case\"\
    string\":i=e.label;break;case\"function\":i=e.label(t)}if(i){if(e.urlField&&(l=t.getData()[e.urlField]),e.url)switch(typeof\
    \ e.url){case\"string\":l=e.url;break;case\"function\":l=e.url(t)}return e.target&&n.setAttribute(\"\
    target\",e.target),e.download&&(r=\"function\"==typeof r?r(t):!0===r?\"\":r,n.setAttribute(\"\
    download\",r)),n.innerHTML=this.emptyToSpace(this.sanitizeHTML(i)),n}return\"\
    &nbsp;\"};\n// datepicker editor\nTabulator.prototype.moduleBindings.edit.prototype.editors.dateEditor=function(t,e,o,n,a){var\
    \ d=document.createElement(\"input\");return d.setAttribute(\"type\",\"date\"\
    ),d.style.padding=\"3px\",d.style.width=\"100%\",d.style.boxSizing=\"border-box\"\
    ,$(d).addClass(\"datepicker\"),d.value=moment(t.getValue(),\"DD/MM/YYYY\").format(\"\
    YYYY-MM-DD\"),e(function(){d.focus(),d.style.css=\"100%\"}),d.addEventListener(\"\
    blur\",function(){d.value?o(moment(d.value,\"YYYY-MM-DD\").format(\"DD/MM/YYYY\"\
    )):n()}),d};\n// patch for deepCloning Skulpt elements\nTabulator.prototype.helpers.deepClone\
    \ = function (e) {\n    if (e.$isPyWrapped) return e; // don't clone me i'm self\
    \ referencing!\n    var r = Array.isArray(e) ? [] : {};\n    for (var t in e)\n\
    \        null != e[t] && \"object\" == typeof e[t]\n            ? e[t] instanceof\
    \ Date\n                ? (r[t] = new Date(e[t]))\n                : (r[t] = this.deepClone(e[t]))\n\
    \            : (r[t] = e[t]);\n    return r;\n};\n\n  Tabulator.prototype.moduleBindings.edit.prototype.editors.dateEditor\
    \ = function (t, e, o, n, a) {\n    var d = document.createElement(\"input\");\n\
    \    return (\n        d.setAttribute(\"type\", \"date\"),\n        (d.style.padding\
    \ = \"3px\"),\n        (d.style.width = \"100%\"),\n        (d.style.boxSizing\
    \ = \"border-box\"),\n        $(d).addClass(\"datepicker\"),\n        (d.value\
    \ = moment(t.getValue(), \"DD/MM/YYYY\").format(\"YYYY-MM-DD\")),\n        e(function\
    \ () {\n            d.focus(), (d.style.css = \"100%\");\n        }),\n      \
    \  d.addEventListener(\"blur\", function () {\n            d.value ? o(moment(d.value,\
    \ \"YYYY-MM-DD\").format(\"DD/MM/YYYY\")) : n();\n        }),\n        d\n   \
    \ );\n};\n  \nconst pythonformatToMomentJS = {\n    \"%\": \"%%\",\n    A: \"\
    %p\",\n    DDDD: \"%j\",\n    DD: \"%d\",\n    HH: \"%H\",\n    L: \"%x\",\n \
    \   LT: \"%X\",\n    MMMM: \"%B\",\n    MMM: \"%b\",\n    MM: \"%m\",\n    WW:\
    \ \"%W\",\n    YYYY: \"%Y\",\n    YY: \"%y\",\n    dddd: \"%A\",\n    ddd: \"\
    %a\",\n    e: \"%w\",\n    hh: \"%I\",\n    llll: \"%c\",\n    mm: \"%M\",\n \
    \   ss: \"%S\",\n    ww: \"%U\",\n};\n\nconst formatRegex = /dddd|ddd|MMMM|MMM|llll|DDDD|HH|hh|DD|MM|mm|A|ss|ww|e|WW|L|LT|YYYY|YY/g;\n\
    const convertFormat = (f) => f.replace(formatRegex, (match) => pythonformatToMomentJS[match]);\n\
    \nconst dt = Tabulator.prototype.moduleBindings.format.prototype.formatters.datetime;\n\
    Tabulator.prototype.moduleBindings.format.prototype.formatters.datetime = function\
    \ (\n    cell,\n    formatterParams,\n    onRendered\n) {\n    var inputFormat\
    \ = formatterParams.inputFormat || \"YYYY-MM-DD hh:mm:ss\";\n    var outputFormat\
    \ = formatterParams.outputFormat || \"DD/MM/YYYY hh:mm:ss\";\n    var invalid\
    \ = typeof formatterParams.invalidPlaceholder !== \"undefined\" ? formatterParams.invalidPlaceholder\
    \ : \"\";\n\n    const strftime = new Sk.builtin.str(\"strftime\");\n    var value\
    \ = cell.getValue();\n  \tlet newDatetime;\n    if (typeof value === \"string\"\
    \ || !value.$isPyWrapped) {\n          newDatetime = moment(value, inputFormat);\n\
    \    } else if (value.$isPyWrapped) {\n      \tvalue = PyDefUtils.unwrapOrRemapToPy(value);\n\
    \        value = PyDefUtils.pyCall(value.tp$getattr(strftime), [new Sk.builtin.str(convertFormat(outputFormat))]);\n\
    \        value = value.toString();\n        newDatetime = moment(value, outputFormat);\
    \ \n    }\n\n    if (newDatetime.isValid()) {\n        return formatterParams.timezone\n\
    \            ? newDatetime.tz(formatterParams.timezone).format(outputFormat)\n\
    \            : newDatetime.format(outputFormat);\n    } else {\n        if (invalid\
    \ === true) {\n            return value;\n        } else if (typeof invalid ===\
    \ \"function\") {\n            return invalid(value);\n        } else {\n    \
    \        return invalid;\n        }\n    }\n};\n\n\n  \n</script>\n\n\n<style>\n\
    \  .tabulator.anvil-spacing-below-none{margin-bottom : 0px;}\n  .tabulator.anvil-spacing-below-small{margin-bottom\
    \ : 4px;}\n  .tabulator.anvil-spacing-below-medium{margin-bottom : 8px;}\n  .tabulator.anvil-spacing-below-large{margin-bottom\
    \ : 16px;}\n  .tabulator-cell .column-panel, .tabulator-cell input {margin: 0\
    \ !important;}\n  .tabulator-cell .form-control {padding-top: 0 !important;}\n\
    \  .title-center{ text-align: center !important }\n  .tabulator-header {border-bottom:\
    \ none !important}\n  .tabulator-col-content {border-bottom: 2px solid #ddd}\n\
    </style>"}
db_schema: []
renamed: true
